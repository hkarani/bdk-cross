#!/bin/bash

# source ./targets.sh
set -e


bdkrepbuild__build() {
    supported_libraries_keys=("bdk-flutter" "boltz-dart" "lwk-dart")
    supported_libraries_urls=("https://github.com/LtbLightning/bdk-flutter" "https://github.com/SatoshiPortal/boltz-dart" "https://github.com/SatoshiPortal/lwk-dart")

    # Function to get the repository URL
    get_repo_url() {
        local library_name="$1"
        for i in "${!supported_libraries_keys[@]}"; do
            if [[ "${supported_libraries_keys[i]}" == "$library_name" ]]; then
                echo "${supported_libraries_urls[i]}"
                return
            fi
        done
        echo "Library not found"
        exit 1
    }
    echo $2
    echo $(get_repo_url $2)
    # cd src/
    git clone $(get_repo_url $2)
    cd $2

    cd src/lwk-dart/cargokit/build_tool
    # echo $external_var
    eval "CARGOKIT_ROOT_PROJECT_DIR="/home/hkarani/Desktop/Projects/bdk-flutter-reproducible-build/src/lwk-dart/cargokit" CARGOKIT_TARGET_PLATFORM="linux-x64" CARGOKIT_CONFIGURATION="release" CARGOKIT_TARGET_TEMP_DIR="/home/hkarani/Desktop/Projects/bdk-flutter-reproducible-build/lib/linux" CARGOKIT_MANIFEST_DIR="/home/hkarani/Desktop/Projects/bdk-flutter-reproducible-build/src/lwk-dart/rust" CARGOKIT_OUTPUT_DIR="/home/hkarani/Desktop/Projects/bdk-flutter-reproducible-build/release/linux" dart run build_tool build-cmake"

    echo "$2 target build for $3 complete "
}

bdkrepbuild__help_build(){

help="
Create a build for specific target

USAGE
    $ ./bdk-rep-build build <target>

EXAMPLE 
    $ ./bdk-rep-build build linux
"

echo "$help"

}


bdkrepbuild__verify(){
 echo "downnloading $2"
 echo "checking out $3"
 echo "building $4"

}

bdkrepbuild__help_verify() {
    help="
Verify a build for a specific target

USAGE
    $ ./bdk-rep-build verify <target>

EXAMPLE 
    $ ./bdk-rep-build verify linux
"

echo "$help"

}



bdkrepbuild__help(){

    if [ $# -eq 2 ]; then
      call "bdkrepbuild__$1_$2" "$@"
      exit 0
    fi

    help="

 ____  ____  _  __     ____  _____ ____       ____  _   _ ___ _     ____  
| __ )|  _ \| |/ /    |  _ \| ____|  _ \     | __ )| | | |_ _| |   |  _ \ 
|  _ \| | | | ' /_____| |_) |  _| | |_) |____|  _ \| | | || || |   | | | |
| |_) | |_| | . \_____|  _ <| |___|  __/_____| |_) | |_| || || |___| |_| |
|____/|____/|_|\_\    |_| \_\_____|_|        |____/ \___/|___|_____|____/ 

        Cross-compile and verify reproducible builds for bdk-rust library.
            * To use with : BDK-Flutter, LWK-Dart, BOLTZ-dart
            * Targeting: Linux, Android, iOS, MaoOS 
USAGE
    $ bdk-rep-build [COMMAND]
    $ bdk-rep-build help [COMMAND]

COMMANDS
    help                show help
    
    verify          verify build against release
    build           build artifacts for a target     

"

echo "$help"

}



call() {
    func=$1
    if type "$func" 1>/dev/null 2>&1; then
        # if it's bdk_rep_build COMMAND help, then call help for that command
        case $3 in
          -h|--help|help)
          call "bdkrepbuild__help_$2"
          exit 0
          ;;
        esac
        shift # remove func from args
        "$func" "$@"  # invoke our named function w/ all remaining arguments
    else
        # if it's bdk_rep_build -h COMMAND, then call help for that command
        case $2 in
          -h|--help)
          call "bdkrepbuild__help_$3"
          exit 0
          ;;
        esac
        bdkrepbuild__help
        exit 1
    fi
}

call "bdkrepbuild__$1" "$@"