#!/bin/sh

set -e

bdkrepbuild__build() {

    # check if the library to be built has been passed to the script
    if [ -z "$2" ]; then
        echo "❌ You did not specify a library to build! ❌"
        usage=" 
        USAGE
            $ ./bdk-rep-build build <library> <target>

        EXAMPLE 
            $ ./bdk-rep-build build bolt-dart x86_64-unknown-linux-gnu"
        echo "$usage"
        exit 1 
    fi

    case "$2" in
    "bdk-flutter" | "boltz-dart" | "lwk-dart")
        parent_folder="$(pwd)/src"
        lib_folder="$(pwd)/src/$2"

        supported_libraries_keys=("bdk-flutter" "boltz-dart" "lwk-dart")
        supported_libraries_urls=("https://github.com/LtbLightning/bdk-flutter.git" "https://github.com/SatoshiPortal/boltz-dart.git" "https://github.com/SatoshiPortal/lwk-dart.git")

        # Function to get the repository URL
        get_repo_url() {
            local library_name="$1"
            for i in "${!supported_libraries_keys[@]}"; do
                if [[ "${supported_libraries_keys[i]}" == "$library_name" ]]; then
                    echo "${supported_libraries_urls[i]}"
                    return
                fi
            done
            echo "Library not found"
            exit 1
        }

        repo_url=$(get_repo_url $2) 
        echo "Your repo url is $repo_url"

        if [[ -d "$lib_folder" ]]; then
            echo "Folder exists!"

            if [[ -d "$lib_folder/.git" ]]; then
                echo "Checking for updates in $lib_folder..."
                cd "$lib_folder" || exit 1
                git fetch origin
                # Check if local branch is behind
                if [[ $(git status -uno | grep "Your branch is behind") ]]; then
                    echo "Updating $lib_folder..."
                    git pull origin "$(git rev-parse --abbrev-ref HEAD)"
                else
                    # echo "$lib_folder is already up to date."
                    continue
                fi
            else
                echo "Not a Git repository. Removing and re-cloning..."
                rm -rf "$lib_folder"
                cd $parent_folder
                git clone "$repo_url"
            fi
            cd ../
        else
            echo "Folder does not exist."
            echo "Cloning git repo..."
            cd $parent_folder
            for subfolder in "$parent_folder"/*/; do
                if [[ -d "$subfolder" ]]; then
                    rm -rf "$subfolder" 
                fi
            done
            git clone "$repo_url"
        fi
        ;;
    *)
        echo "❌ Error: $2 is not a supported library. ❌"
        supported_libraries="
            Supported libraries are:
                - lwk-dart
                - bdk-flutter
                - lwk-dart
        "
        echo "$supported_libraries"
        exit 1
        ;;
    esac


    if [ -z "$3" ]; then
        echo "❌ You did not specify a build target! ❌"
        usage=" 
        USAGE
            $ ./bdk-rep-build build <library> <target>

        EXAMPLE 
            $ ./bdk-rep-build build bolt-dart x86_64-unknown-linux-gnu
        "
        echo "$usage"
        exit 1  # Exit script with error code
    fi

    targets=(
        "x86_64-unknown-linux-gnu" "aarch64-unknown-linux-gnu"
        "armv7-linux-androideabi" "aarch64-linux-android" "i686-linux-android"
        "x86_64-linux-android" "x86_64-pc-windows-msvc" "x86_64-apple-darwin"
        "aarch64-apple-darwin" "aarch64-apple-ios" "aarch64-apple-ios-sim"
        "x86_64-apple-ios"
    )

    
    case "$3" in
        "x86_64-unknown-linux-gnu" | "aarch64-unknown-linux-gnu" | \
        "armv7-linux-androideabi" | "aarch64-linux-android" | "i686-linux-android" | \
        "x86_64-linux-android" | "x86_64-pc-windows-msvc" | "x86_64-apple-darwin" | \
        "aarch64-apple-darwin" | "aarch64-apple-ios" | "aarch64-apple-ios-sim" | \
        "x86_64-apple-ios")
        ;;
    *)
        echo "❌ Error: $3 is not a supported build target. ❌"
        supported_targets="
            Supported targets are:
                -x86_64-unknown-linux-gnu 
                -aarch64-unknown-linux-gnu
                -armv7-linux-androideabi 
                -aarch64-linux-android 
                -i686-linux-android  
                -x86_64-linux-android 
                -x86_64-pc-windows-msvc 
                -x86_64-apple-darwin
                -aarch64-apple-darwin 
                -aarch64-apple-ios 
                -aarch64-apple-ios-sim 
                -x86_64-apple-ios
        "
        echo "$supported_targets"
        exit 1
        ;;
    esac

    cd ../
    target=$3
    library=$2   
    export target
    . "./$target.sh" "$library"
    # echo "Building $3 binariy for $2"
}

bdkrepbuild__help_build(){

    help="
    Create a binaries for specific target
    USAGE
        $ ./bdk-rep-build build <library> <target>

    EXAMPLE 
        $ ./bdk-rep-build build bolt-dart x86_64-unknown-linux-gnu
    "

    echo "$help"

}


bdkrepbuild__verify(){
    # check if the library to be built has been passed to the script
    if [ -z "$2" ]; then
        echo "❌ You did not specify a library to verify! ❌"
        usage=" 
        USAGE
            $ ./bdk-rep-build verify <library> <target>

        EXAMPLE 
            $ ./bdk-rep-build verify bolt-dart x86_64-unknown-linux-gnu
        "
        echo "$usage"
        exit 1 
    fi

    case "$2" in
    "bdk-flutter" | "boltz-dart" | "lwk-dart")
        ;;
    *)
        echo "❌ Error: $2 is not a supported library. ❌"
        supported_libraries="
            Supported libraries are:
                - lwk-dart
                - bdk-flutter
                - lwk-dart
        "
        echo "$supported_libraries"
        exit 1
        ;;
    esac

    if [ -z "$3" ]; then
        echo "❌ You did not specify a target to verify! ❌"
        usage=" 
        USAGE
            $ ./bdk-rep-build verify <library> <target>

        EXAMPLE 
            $ ./bdk-rep-build verify boltz-dart x86_64-unknown-linux-gnu
        "
        echo "$usage"
        exit 1  # Exit script with error code
    fi

    case "$3" in
        "x86_64-unknown-linux-gnu" | "aarch64-unknown-linux-gnu" | \
        "armv7-linux-androideabi" | "aarch64-linux-android" | "i686-linux-android" | \
        "x86_64-linux-android" | "x86_64-pc-windows-msvc" | "x86_64-apple-darwin" | \
        "aarch64-apple-darwin" | "aarch64-apple-ios" | "aarch64-apple-ios-sim" | \
        "x86_64-apple-ios")
        ;;
    *)
        echo "❌ Error: $3 is not a supported target you can verify. ❌"
    supported_targets="
        Supported targets are:
                -x86_64-unknown-linux-gnu 
                -aarch64-unknown-linux-gnu
                -armv7-linux-androideabi 
                -aarch64-linux-android 
                -i686-linux-android  
                -x86_64-linux-android 
                -x86_64-pc-windows-msvc 
                -x86_64-apple-darwin
                -aarch64-apple-darwin 
                -aarch64-apple-ios 
                -aarch64-apple-ios-sim 
                -x86_64-apple-ios

       "
        echo "$supported_targets"
        exit 1
        ;;
    esac

    # target="$2"   
    # export $target

    # . ./verifier.sh
    echo "Verifying $3 for $2 library"

}

bdkrepbuild__help_verify() {
    help="
Verify a build for a specific target

USAGE
$ ./bdk-rep-build verify <library> <target>

EXAMPLE 
$ ./bdk-rep-build verify boltz-dart x86_64-unknown-linux-gnu
"

echo "$help"

}



bdkrepbuild__help(){

    if [ $# -eq 2 ]; then
      call "bdkrepbuild__$1_$2" "$@"
      exit 0
    fi

    help="

 ____  ____  _  __     ____  _____ ____       ____  _   _ ___ _     ____  
| __ )|  _ \| |/ /    |  _ \| ____|  _ \     | __ )| | | |_ _| |   |  _ \ 
|  _ \| | | | ' /_____| |_) |  _| | |_) |____|  _ \| | | || || |   | | | |
| |_) | |_| | . \_____|  _ <| |___|  __/_____| |_) | |_| || || |___| |_| |
|____/|____/|_|\_\    |_| \_\_____|_|        |____/ \___/|___|_____|____/ 

        Cross-compile and verify reproducible builds for bdk-rust library.
            * To use with : BDK-Flutter, LWK-Dart, BOLTZ-dart
            * Targeting: Linux, Android, iOS, MaoOS 
USAGE
    $ bdk-rep-build [COMMAND]
    $ bdk-rep-build help [COMMAND]

COMMANDS
    help                show help
    
    verify          verify build against release
    build           build artifacts for a target     

"

echo "$help"

}



call() {
    func=$1
    if type "$func" 1>/dev/null 2>&1; then
        # if it's bdk_rep_build COMMAND help, then call help for that command
        case $3 in
          -h|--help|help)
          call "bdkrepbuild__help_$2"
          exit 0
          ;;
        esac
        shift # remove func from args
        "$func" "$@"  # invoke our named function w/ all remaining arguments
    else
        # if it's bdk_rep_build -h COMMAND, then call help for that command
        case $2 in
          -h|--help)
          call "bdkrepbuild__help_$3"
          exit 0
          ;;
        esac
        bdkrepbuild__help
        exit 1
    fi
}

call "bdkrepbuild__$1" "$@"